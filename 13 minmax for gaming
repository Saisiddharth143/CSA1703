def evaluate(board):
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != 0:
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != 0:
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2] != 0:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != 0:
        return board[0][2]
    if any(0 in row for row in board):
        return None  
    return 0 
def minimax(board, depth, is_max):
    if depth == 0 or evaluate(board) is not None:
        return evaluate(board)
    if is_max:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = 2
                    eval = minimax(board, depth-1, False)
                    board[i][j] = 0
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = 1
                    eval = minimax(board, depth-1, True)
                    board[i][j] = 0
                    min_eval = min(min_eval, eval)
        return min_eval
def find_best_move(board):
    best_eval = float('-inf')
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                board[i][j] = 2
                move_eval = minimax(board, 9, False)
                board[i][j] = 0
                if move_eval > best_eval:
                    best_eval = move_eval
                    best_move = (i, j)
    return best_move
def print_board(board):
    for i in range(3):
        print(" ".join(str(cell) for cell in board[i]))
board = [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]]
for _ in range(4):
    player_move = tuple(map(int, input("Enter your move (row col): ").split()))
    board[player_move[0]][player_move[1]] = 1
    print_board(board)
    ai_move = find_best_move(board)
    board[ai_move[0]][ai_move[1]] = 2
    print_board(board)
